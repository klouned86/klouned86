Класификация по уровню детализации

1.1 Модульное - тестирование отдельных частей приложения которые можно протестировать отдельно
1.2 Интеграционное - тестирование взаимодействия между несколькими частями приложения, которые как правило уже протестированы отдельно
1.3 Системное - тестирование работы всего приложения целиком, после сборки из частей проверенных на предыдущих этапах тестирования. Позволяет взаимодействовать с приложением в целом, возможно взаимодействие с точки зрения конечного пользователя.
1.4  Приемочное тестирование (комплексное тестирование ПО готовности приложения к последующей эксплуатации, сценариями покрывающими основную бизнес логику)


По доступу к коду и архитектуре приложения

2.1 Метод белого ящика - когда тестировщик знает как устроена и работает система, имеет доступ к коду и понимает как код работает.
2.2 Метод серого ящика - сочетание методов белого и черного ящиков, тестировщик имеет не полный доступ к бэкэнд функционалу приложения, как правило не имеет доступа к исходному коду ПО
2.3 Метод черного ящика - тестировщик не знает как работает система, не имеет доступа к коду и тестирует  используя только графический интерфейс (взаимодействие с точки зрения конечного пользователя)





По запуску кода на исполнение

3.1 Статическое - происходит без запуска кода на исполнение, включает
ревизию кода, 
соответствие ПО требованиям, 
тестирование документации, 
архитектуры, 
проверка макетов интерфейса 
тест кейсов
юзер стори
(можно начать когда ПО еще не написано 
проверка тестовых данных и окружения

3.2 Динамическое - основано на запуске кода на исполнение (ФР - ОР), включает запуск функциональностей, прохождение сценариев

4.по степени важности тестовых функций виды тестирования, связанные с изменениями

4.1 smoke тестирование норвого билда после изменений, заключается в тестирорвании самых важных функций без которых работа приложения и дальнейшее  тестирование невозможно
4.2 regression тестирование ранее протестированной функциональности, после внесения изменений, которые могли затронуть данную функциональность
4.3 e2e сквозное тестирование, тестирование от точки входа до точки выхода, покрывает различные сценарии от начала до конца
4.4 retest тестирование пофикшенного бага
4.5 new feature testing тестирование новых функциональностей билда
4.6 критический путь направлено на тестирование типичных функций пользователя которые он будет использовать в повседневной деятельности. Порог непройденных тестов чуть меньше чем в смоук, но все равно достаточно большой.

6. По степени автоматизации

6.1 Ручное выполняется тестировщиком вручную
6.2 Автоматическое выполняется при помощи специального ПО и заранее написанных автотестов

7.По принципу работы с приложениями

7.1 Позитивное включает всебя валидные кейсы взаимодействия с приложением. Подразумевает под собой сценарии с правильными входными данными
7.2 Негативное подразумевает под собой не валидные кейсы работы с приложением (не корректные входные данные, нарушение логики)

вопросы, которые нужно оформить:
- классификация тестирования по уровню детализации
- по доступу к коду и архитектуре приложения (методы)
- по запуску кода на исполнение (статическое, динамическое)
- по степени важности тестовых функций (виды тестирования, связанные с изменениями: smoke, regression, e2e, retest, new feature testing, критический путь)
- по степени автоматизации (ручное, автоматизация)
- по принципу работы с приложениями (позитивное, негативное)





