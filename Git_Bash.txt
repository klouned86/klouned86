1)Посмотреть где я 
klouned86@DESKTOP-4GPQIMQ MINGW64 /d/git
$ pwd
/d/git

2) Создать папку 
klouned86@DESKTOP-4GPQIMQ MINGW64 /d/git
$ mkdir dir_1

3) Зайти в папку
klouned86@DESKTOP-4GPQIMQ MINGW64 /d/git
$ cd dir_1

4) создать три папки 
klouned86@DESKTOP-4GPQIMQ MINGW64 /d/git
$ mkdir dir_2 dir_3 dir_4

5) зайти в любую папку
klouned86@DESKTOP-4GPQIMQ MINGW64 /d/git
$ cd dir_1

6) Создать 3 txt + 2 json
klouned86@DESKTOP-4GPQIMQ MINGW64 /d/git/dir_1
$ touch 1.txt 2.txt 3.txt a.json b.json

7) Аналогично 4


8) Вывести список содержимого папки
 klouned86@DESKTOP-4GPQIMQ MINGW64 /d/git/dir_1
$ ls -la
total 4
drwxr-xr-x 1 klouned86 197121 0 Oct 29 20:27 ./
drwxr-xr-x 1 klouned86 197121 0 Oct 29 20:23 ../
-rw-r--r-- 1 klouned86 197121 0 Oct 29 20:27 1.txt
-rw-r--r-- 1 klouned86 197121 0 Oct 29 20:27 2.txt
-rw-r--r-- 1 klouned86 197121 0 Oct 29 20:27 3.txt
-rw-r--r-- 1 klouned86 197121 0 Oct 29 20:27 a.json
-rw-r--r-- 1 klouned86 197121 0 Oct 29 20:27 b.json

9) Открыть txt фаил
klouned86@DESKTOP-4GPQIMQ MINGW64 /d/git/dir_1
$ vim 1.txt 

10)  I(insert) написали туда текст 

11) выйти и сохранить esc:wq

12) Выйти из папки на уровень выше
klouned86@DESKTOP-4GPQIMQ MINGW64 /d/git/dir_1
$ cd ..

13) Переместить 2 файла в другую папку
4GPQIMQ MINGW64 /d/git/dir_1
$ mv a.json  /d/git/dir_2/a.json

klouned86@DESKTOP-4GPQIMQ MINGW64 /d/git/dir_1
$  mv b.json  /d/git/dir_2/b.json

14) Скопировать 2 файла в другую папку
klouned86@DESKTOP-4GPQIMQ MINGW64 /d/git/dir_1
$ cp 1.txt  /d/git/dir_2/1.txt

klouned86@DESKTOP-4GPQIMQ MINGW64 /d/git/dir_1
$ cp 2.txt  /d/git/dir_2/2.txt

15) найти файл по имени 
klouned86@DESKTOP-4GPQIMQ MINGW64 /d/git/dir_1
$ find 1.txt
1.txt

16) Посмотреть содержимое в реальном времени (для наглядности лучше использовать динамичный фаил, например журнал логов)
, команда grep используется для фильтрации входящей информации по критериям

klouned86@DESKTOP-4GPQIMQ MINGW64 /d/git/dir_1
$ tail /d/git/dir_1 3.txt
==> /d/git/dir_1 <==
tail: error reading '/d/git/dir_1': Is a directory

==> 3.txt <==
 RM
Удаляет файлы и папки. Очень полезная команда Linux: с её помощью вы можете убрать весь беспорядок. Если нужно рекурсивное удаление, используйте опцию -r. Однако будьте осторожны: конечно, для того чтобы повредить систему вам нужно будет серьёзно постараться, однако можно удалить собственные важные файлы. Rm удаляет файлы не в корзину, из которой потом всё можно будет восстановить, а полностью стирает. Действия оператора rm необратимы. Поверьте, ваши оправдания в духе "rm съела мою курсовую" никому не будут интересны. Подробнее в этой статье.
 LN
Создает жёсткие или символические ссылки на файлы. Символические или программные ссылки - это что-то похожее на ярлыки в Windows. Они предоставляют удобный способ доступа к определённому файлу. Символические ссылки указывают на файл, но не имеют никаких метаданных. Жёсткие ссылки, в отличие от символических, указывают на физический адрес области диска, где хранятся данные файла.
CHMOD
Изменяет права доступа к файлу. Это чтение, запись и выполнение. Каждый пользователь может изменять права для своих файлов.
CHOWN
Изменяет владельца файла. Только суперпользователь может изменять владельцев. Для рекурсивного изменения используйте опцию -R.
 FIND
Поиск в файловой системе, файлах и папках. Это очень гибкая

17) вывести несколько первых строк из текстового фаила
klouned86@DESKTOP-4GPQIMQ MINGW64 /d/git/dir_1
$ head  /d/git/dir_1 3.txt
==> /d/git/dir_1 <==
head: error reading '/d/git/dir_1': Is a directory
==> 3.txt <==
Утилита для просмотра содержимого каталогов. По умолчанию показывает текущий каталог. Если в параметрах указать путь, то она перечислит содержимое конечного каталога. Полезные опции -l (List) и -a (All). Первая форматирует вывод в виде списка с более подробной информацией, а вторая включает показ скрытых файлов. Подробнее здесь.
 CAT
Печатает содержимое файла, переданного в параметре, в стандартный вывод. Если передать несколько файлов, команда склеит их. Также можно перенаправить вывод в ещё один файл с помощью символа '>'. Если нужно вывести только определенное количество строк, используйте опцию -n (Number). Подробнее тут.
 CD
Позволяет перейти из текущего каталога в указанный. Если запустить без параметров - возвращает в домашний каталог. Вызов с двумя точками возвращает на уровень вверх относительно текущего каталога. Вызов с тире (cd -) возвращает к предыдущему каталогу. Более детально здесь.
 PWD
Печатает на экран текущий каталог. Это может быть полезно, если ваша командная строка Linux не выводит такую информацию. Эта команда будет востребована в Bash программировании, где для получения ссылки на каталог выполняется скрипт. Более подробно в отдельной статье.
 MKDIR
Создание новых каталогов. Наиболее удобная опция -p (Parents), позволяет создать всю структуру подкаталогов одной командой, даже если они ещё не существуют. Подробнее о том как создать папку читайте в отдельной статье.
 FILE

18) Вывести несколько последних строк файла
 klouned86@DESKTOP-4GPQIMQ MINGW64 /d/git/dir_1
$ tail -n 7 3.txt
Создает жёсткие или символические ссылки на файлы. Символические или программные ссылки - это что-то похожее на ярлыки в Windows. Они предоставляют удобный способ доступа к определённому файлу. Символические ссылки указывают на файл, но не имеют никаких метаданных. Жёсткие ссылки, в отличие от символических, указывают на физический адрес области диска, где хранятся данные файла.
 CHMOD
Изменяет права доступа к файлу. Это чтение, запись и выполнение. Каждый пользователь может изменять права для своих файлов.
 CHOWN
Изменяет владельца файла. Только суперпользователь может изменять владельцев. Для рекурсивного изменения используйте опцию -R.
 FIND
Поиск в файловой системе, файлах и папках. Это очень гибкая

19) Вывести содержимое длинного файла
klouned86@DESKTOP-4GPQIMQ MINGW64 /d/git/dir_1
$ less  /d/git/dir_1 3.txt
/d/git/dir_1 is a directory
Press RETURN to continue
 выйти из просмотра q

20) Вывести время и дату 
klouned86@DESKTOP-4GPQIMQ MINGW64 /d/git/dir_1
$ date  "+DATE: %D%nTIME: %T"
DATE: 10/30/21
TIME: 10:02:58



